---
title: "Accessing Census Data in R through APIs"
author: "Stephanie Zimmer"
format: 
  revealjs:
      slide-number: true
      theme: solarized
      scrollable: true
      footer: "**Slides** : [**https://szimmer.github.io/census-api-user-2025/Slides.html**](https://szimmer.github.io/census-api-user-2025/Slides.html#/title-slide)"
execute: 
  echo: true
  tidy: true
  error: true
---

```{r}
#| label: setup
#| include: false

library(dplyr)
library(magrittr)
library(stringr)
library(tidyr)
library(DT)
library(ggplot2)
library(ggthemes)
library(srvyr)
library(tidycensus)
library(sf)
```



# Overview

## Census API

- What is the Census API?
  - An API that gives access to data from many programs

- Programs include:
  - American Community Survey: tables and microdata
  - Decennial Census
  - Population Estimates and Projections
  - And more

- [Census documentation](https://www.census.gov/data/developers/guidance/api-user-guide.html)

## Useful R packages {.smaller}

- **censusapi**
  - Any data program available on Census API
  - Data is not cleaned
  - Not discussed today

- **tidycensus**
  - American Community Survey (ACS) tables, ACS microdata, Decennial tables, PEP tables, and ACS migration flow data
  - Nice wrappers
  - Data has special missing codes changed to `r NA`

## API keys

- An API key is needed and needs to be requested^[https://api.census.gov/data/key_signup.html]

- Bad practice to store an API key in your code

- Install the API key locally to your .Renviron file

- Only need to do this per device you use

```r
tidycensus::census_api_key("abcdefghijkl", overwrite = TRUE, install = TRUE)
```

Retrieve using:

```r
Sys.getenv("CENSUS_API_KEY")
```

# Tabular data from ACS

## Workflow for getting tabular estimates

1. Find the variables using `load_variables()`
2. Use `get_acs()`, `get_decennial()`, `get_flows()`, or `get_estimates()` to query the data




## Motivating example

Find number of housing units by where current college students live in each block group in Durham County, NC from ACS 2019-2023 data

```{r}
#| label: yearset
year_select <- 2023
```


## Find variables

- Looking at 5-year ACS data

```{r}
#| label: findvarsb
#| cache: true
library(tidycensus)
library(sf)
findvars_tidy <- load_variables(year = year_select, dataset = "acs5")
glimpse(findvars_tidy)
```



## Find variables

- Looking at 5-year ACS data for School Enrollment variables available at block group level
- After manually exploring the data, determine we want the variables from the concept "School Enrollment by Detailed Level of School for the Population 3 Years and Over" (B14007)

```{r}
#| label: findvars-dt

findvars_tidy %>%
  filter(str_detect(concept, "School Enrollment"),
         geography == "block group") %>%
  mutate(Table=word(name, 1, sep="_")) %>%
  count(Table, concept)

findvars_tidy %>% 
  filter(str_detect(name, "B14007_")) %>%
  select(name, label)
```


## Clean up variable labels

```{r}
#| label: cleannames
#| include: false
myvars_labeled <-
  findvars_tidy %>%
  filter(str_detect(name, "B14007_")) %>%
  mutate(label=str_remove_all(label, ":")) %>%
  separate_wider_delim(label, 
                       names = c(NA, NA, "Enrollment", "Level"), 
                       delim = "!!", too_few = "align_start") %>%
  filter(!is.na(Level) | Enrollment == "Not enrolled in school") %>%
  mutate(EducEnrollment=coalesce(Level, Enrollment)) %>%
  select(name, EducEnrollment)
```

```{r}
#| label: print-clean-labels
myvars_labeled
```


## Get the data

```{r}
#| label: getdat2
#| output: false
#| warning: false
sch_enroll_tidy <- get_acs(
  geography = "block group",
  variables = pull(myvars_labeled, name),
  year = year_select,
  survey = "acs5",
  state = "37",
  county = "063",
  geometry = TRUE
)
```

## Get the data

```{r}
#| label: getdat3
sch_enroll_tidy
```

## Label data


```{r}
#| label: labdat
sch_enroll_tidy_lab <-
  sch_enroll_tidy %>%
  select(-NAME) %>%
  left_join(myvars_labeled, by = c("variable" = "name"))

sch_enroll_tidy_lab
```

## Calculate percent in college/grad school by area

```{r}
sch_enroll_tidy_pct <- sch_enroll_tidy_lab %>%
  mutate(
    Percent=estimate/sum(estimate)*100,
    .by="GEOID"
  ) %>%
  filter(str_detect(EducEnrollment, "college|Grad")) %>%
  group_by(GEOID) %>%
  summarize(
    Percent=sum(Percent), 
    .groups= "drop")
  
```


## Map of where college students live

```{r}
#| label: bymap
#| eval: false
sch_enroll_tidy_pct %>%
  ggplot(aes(fill = Percent)) +
  geom_sf() +
  theme_map() +
  scale_fill_viridis_c(option = "plasma") +
  theme(legend.position = "bottom")
```


## Map of where college students live

```{r}
#| label: bymap-do
#| echo: false

<<bymap>>
```


# Microdata from ACS

## Workflow

1. Identify geography of interest 
2. Identify variables of interest (`pums_variables`)
3. Use `get_pums()` to query data

Warning - this data can be large!!!

## Identify variables 

```{r}
#| label: pums-var-ext
pums_vars_2023 <-
  pums_variables %>%
  filter(year == year_select, survey == "acs5")

pums_vars_2023 %>% print(n = 5)
```

```{r}
#| label: calcnrows
#| include: false

pums_vars_n <- nrow(pums_vars_2023 %>% distinct(var_code))
```


- There are `r pums_vars_n` distinct variables!
- Can also review [data dictionary](https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMS_Data_Dictionary_2019-2023.pdf)


## Get some microdata

- For Durham, we want PUMAs^[Public Use Microdata Areas] 37 01301 and 37 01302 (Durham County South and North, respectively)^[https://www2.census.gov/geo/pdfs/reference/puma2020/2020_PUMA_Names.pdf]

```r
pums_recoded <- get_pums(
  variables = c("PUMA", "SEX", "AGEP", "SCHL", "SCHG"),
  state = "NC",
  puma = c("01301", "01302"),
  survey = "acs5",
  year = year_select,
  recode = TRUE,
  rep_weights = "person"
  )
```

```{r}
#| label: pums-get
#| cache: true
#| message: false
#| include: false
pums_recoded <- get_pums(
  variables = c("PUMA", "SEX", "AGEP", "SCHL", "SCHG"),
  state = "NC",
  puma = c("01301", "01302"),
  survey = "acs5",
  year = year_select,
  recode = TRUE,
  rep_weights = "person"
)
```

## Glimpse the microdata

```{r}
#| label: pums-glimpse

glimpse(pums_recoded)
```

## Make custom estimates

- Example: Level of school attendance among those who have finished high school, age 18-25

```{r}
#| label: cust-est
#| eval: false
library(srvyr)

pums_recoded %>%
  to_survey() %>%
  filter(AGEP %in% c(18:25)) %>%
  filter(as.numeric(SCHL) >= 16) %>%
  group_by(PUMA, SCHG_label) %>%
  summarize(
    N = survey_total(),
    Pct = survey_mean() * 100
  )
```

## Make custom estimates

- Example: Level of school attendance among those who have finished high school, age 18-25

```{r}
#| eval: true
#| echo: false

<<cust-est>>
```



# Questions
